name: Video Text Enhancer

on:
  workflow_dispatch:
    inputs:
      video_path:
        description: '分析対象の動画ファイルパス（リポジトリ内の相対パス）。auto-selectはvideosディレクトリの最新の動画を選択'
        required: true
        type: string
        default: 'auto-select'
      edit_title:
        description: '動画タイトル（省略時は自動生成）'
        required: false
        type: string
      description_prompt:
        description: '説明文生成時の追加プロンプト（任意）'
        required: false
        type: string
      text_position:
        description: 'テキストの表示位置'
        required: false
        type: choice
        default: 'auto'
        options:
          - 'auto'
          - '左上'
          - '上'
          - '右上'
          - '左下'
          - '下'
          - '右下'

permissions:
  contents: write
  pull-requests: write

env:
  GIT_USER_NAME: "github-actions[bot]"
  GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
  FONT_FILE: "/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc"

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch.outputs.branch-name }}
      folder-name: ${{ steps.branch.outputs.folder-name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || github.token }}
        
    - name: Create branch name
      id: branch
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BRANCH_NAME="video-edit-$TIMESTAMP"
        FOLDER_NAME="movie-edit-$TIMESTAMP"
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
        
    - name: Create and switch to new branch
      run: |
        git config --global user.name "${{ env.GIT_USER_NAME }}"
        git config --global user.email "${{ env.GIT_USER_EMAIL }}"
        git checkout -b "${{ steps.branch.outputs.branch-name }}"
        git push -u origin "${{ steps.branch.outputs.branch-name }}"

  analyze-video:
    runs-on: ubuntu-latest
    needs: setup-branch
    outputs:
      title: ${{ steps.verify.outputs.title }}
      analysis-completed: ${{ steps.verify.outputs.completed }}
      descriptions-summary: ${{ steps.verify.outputs.descriptions-summary }}
      actual-video-path: ${{ steps.detect-video.outputs.video-path }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Detect video file
      id: detect-video
      run: |
        VIDEO_PATH="${{ github.event.inputs.video_path }}"
        
        # If auto-select is specified, find the most recently updated video
        if [ "$VIDEO_PATH" = "auto-select" ]; then
          echo "🔍 自動選択モード: videosディレクトリから最新の動画を検索中..."
          
          # Find the most recently modified video file in the videos directory
          echo "📂 videosディレクトリの内容:"
          ls -la videos/ || true
          
          # Use git log to find the most recently committed video file
          echo "🔍 Gitの履歴から最新の動画ファイルを検索中..."
          
          # Show recent commits for videos
          echo "📋 最近のビデオファイルのコミット履歴:"
          git log --oneline --name-only --pretty=format:"%h %ad %s" --date=short -- 'videos/*' | head -20 || true
          
          # Get the most recently committed video file from git history
          LATEST_VIDEO=$(git log --name-only --pretty=format: -- 'videos/*.mp4' 'videos/*.avi' 'videos/*.mov' 'videos/*.mkv' 'videos/*.webm' | grep -E '\.(mp4|avi|mov|mkv|webm)$' | head -1)
          
          # If no video found in git history, fall back to ls
          if [ -z "$LATEST_VIDEO" ]; then
            echo "⚠️ Git履歴から検出できませんでした。ファイルシステムから検索します..."
            LATEST_VIDEO=$(ls videos/*.mp4 videos/*.avi videos/*.mov videos/*.mkv videos/*.webm 2>/dev/null | head -1)
          fi
          
          if [ -z "$LATEST_VIDEO" ]; then
            echo "❌ videosディレクトリに動画ファイルが見つかりません"
            exit 1
          fi
          
          VIDEO_PATH="$LATEST_VIDEO"
          echo "✅ 最新の動画を検出しました: $VIDEO_PATH"
          echo "📹 選択された動画: $VIDEO_PATH"
          
          # 動画の更新日時も表示（複数の方法を試す）
          if command -v stat >/dev/null 2>&1; then
            # GNU stat (Linux)
            VIDEO_DATE=$(stat -c "%y" "$VIDEO_PATH" 2>/dev/null)
            if [ -z "$VIDEO_DATE" ]; then
              # BSD stat (macOS)
              VIDEO_DATE=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$VIDEO_PATH" 2>/dev/null)
            fi
          fi
          
          if [ -n "$VIDEO_DATE" ]; then
            echo "📅 更新日時: $VIDEO_DATE"
          fi
          
          # デバッグ情報：全動画ファイルの更新日時を表示
          echo "🔍 全動画ファイルの更新日時:"
          ls -lt videos/*.mp4 videos/*.avi videos/*.mov videos/*.mkv videos/*.webm 2>/dev/null || echo "No video files found"
        fi
        
        echo "video-path=$VIDEO_PATH" >> $GITHUB_OUTPUT
        
    - name: Verify video file exists
      run: |
        VIDEO_PATH="${{ steps.detect-video.outputs.video-path }}"
        
        if [ ! -f "$VIDEO_PATH" ]; then
          echo "❌ Video file not found: $VIDEO_PATH"
          exit 1
        fi
        echo "✅ Video file found: $VIDEO_PATH"
        
        # Display video information
        echo "📹 Video details:"
        ls -la "$VIDEO_PATH"
        
        # Create analysis directory
        mkdir -p "${{ needs.setup-branch.outputs.folder-name }}/analysis"
        echo "✅ Created analysis directory"
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        pip install google-generativeai
        
    - name: 📊 動画分析 - 準備
      id: prepare-analysis
      run: |
        echo "Starting video analysis..."
        echo "Video path: ${{ steps.detect-video.outputs.video-path }}"
        echo "Output folder: ${{ needs.setup-branch.outputs.folder-name }}"
        mkdir -p "${{ needs.setup-branch.outputs.folder-name }}/analysis"
        
    - name: 🎯 タイトル生成
      id: generate-title
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        set -e
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        
        # カスタムタイトルが指定されている場合
        if [ -n "${{ github.event.inputs.edit_title }}" ]; then
          echo '{"title": "${{ github.event.inputs.edit_title }}", "duration": 3, "style": {"fontsize": 72, "color": "white", "bgcolor": "black@0.8", "fontfile": "/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc"}}' | jq . > "$FOLDER_NAME/analysis/title.json"
          echo "✅ Using custom title: ${{ github.event.inputs.edit_title }}"
        else
          # Geminiでタイトル生成
          echo '{"prompt": "この動画を分析して、魅力的なタイトルを生成してください。以下のJSON形式で返してください：{\"title\": \"生成されたタイトル（20文字以内）\", \"duration\": 3, \"style\": {\"fontsize\": 72, \"color\": \"white\", \"bgcolor\": \"black@0.8\", \"fontfile\": \"/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc\"}}"}' > /tmp/title_prompt.json
          TITLE_PROMPT=$(jq -r '.prompt' /tmp/title_prompt.json)
          
          python scripts/gemini_analyzer.py \
            "${{ steps.detect-video.outputs.video-path }}" \
            "$FOLDER_NAME/analysis/title.json" \
            "$GEMINI_API_KEY" \
            --prompt "$TITLE_PROMPT" \
            --format json
        fi
        
        # Verify title.json
        if [ -f "$FOLDER_NAME/analysis/title.json" ]; then
          echo "✅ Title generated successfully"
          cat "$FOLDER_NAME/analysis/title.json"
        else
          echo "❌ Title generation failed"
          exit 1
        fi
        
    - name: 📝 説明文生成
      id: generate-descriptions
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        set -e
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        TEXT_POSITION="${{ github.event.inputs.text_position }}"
        
        # テキスト位置の決定
        if [ "$TEXT_POSITION" = "auto" ] || [ -z "$TEXT_POSITION" ]; then
          POSITION="top-left"
        else
          POSITION="$TEXT_POSITION"
        fi
        
        # 説明生成プロンプトを作成
        BASE_PROMPT="動画の内容を分析して、重要なシーンに説明テキストを追加するための情報を生成してください。タイミング選定基準：1. シーンの切り替わりや新しい要素が登場するタイミング 2. 重要なアクションや変化が起きるタイミング 3. 視聴者に説明が必要と思われるタイミング 4. 前のテキストから最低2秒以上の間隔を空ける。JSON配列形式で返してください：[{\"timestamp\": \"MM:SS\", \"text\": \"説明テキスト（30文字以内）\", \"duration\": 6, \"fontsize\": 48, \"position\": \"$POSITION\"}, ...]"
        
        # 追加プロンプトがある場合
        if [ -n "${{ github.event.inputs.description_prompt }}" ]; then
          FULL_PROMPT="$BASE_PROMPT 追加の指示: ${{ github.event.inputs.description_prompt }}"
        else
          FULL_PROMPT="$BASE_PROMPT"
        fi
        
        python scripts/gemini_analyzer.py \
          "${{ steps.detect-video.outputs.video-path }}" \
          "$FOLDER_NAME/analysis/descriptions.json" \
          "$GEMINI_API_KEY" \
          --prompt "$FULL_PROMPT" \
          --format json
        
        # テキスト位置情報を保存
        echo "{\"position\": \"$POSITION\"}" > "$FOLDER_NAME/analysis/text-position.json"
        
        # サマリー作成
        echo "# Video Analysis Summary" > "$FOLDER_NAME/analysis/summary.md"
        echo "" >> "$FOLDER_NAME/analysis/summary.md"
        echo "## Generated Title" >> "$FOLDER_NAME/analysis/summary.md"
        TITLE=$(jq -r '.title' "$FOLDER_NAME/analysis/title.json")
        echo "- **Title**: $TITLE" >> "$FOLDER_NAME/analysis/summary.md"
        echo "" >> "$FOLDER_NAME/analysis/summary.md"
        echo "## Text Position" >> "$FOLDER_NAME/analysis/summary.md"
        echo "- **Position**: $POSITION" >> "$FOLDER_NAME/analysis/summary.md"
        echo "" >> "$FOLDER_NAME/analysis/summary.md"
        echo "## Analysis Completed" >> "$FOLDER_NAME/analysis/summary.md"
        echo "- **Date**: $(date)" >> "$FOLDER_NAME/analysis/summary.md"
        
        echo "✅ Analysis completed"
          
    - name: Verify analysis results
      id: verify
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        
        # Debug: Check current directory and folder structure
        echo "📍 Current directory: $(pwd)"
        echo "📁 Checking for folder: $FOLDER_NAME"
        ls -la "$FOLDER_NAME/" || echo "Folder not found: $FOLDER_NAME"
        
        # タイトルJSONの確認
        if [ -f "$FOLDER_NAME/analysis/title.json" ]; then
          echo "📄 title.json found, contents:"
          cat "$FOLDER_NAME/analysis/title.json"
          TITLE=$(jq -r '.title' "$FOLDER_NAME/analysis/title.json")
          echo "✅ Title generated: $TITLE"
          echo "title=$TITLE" >> $GITHUB_OUTPUT
        else
          echo "❌ Title file not found at: $FOLDER_NAME/analysis/title.json"
          echo "📁 Contents of $FOLDER_NAME:"
          ls -la "$FOLDER_NAME/" || echo "Folder not found"
          echo "📁 Contents of $FOLDER_NAME/analysis:"
          ls -la "$FOLDER_NAME/analysis/" || echo "Analysis folder not found"
          exit 1
        fi
        
        # 説明JSONの確認
        if [ -f "$FOLDER_NAME/analysis/descriptions.json" ]; then
          DESC_COUNT=$(jq '. | length' "$FOLDER_NAME/analysis/descriptions.json")
          echo "✅ Descriptions generated: $DESC_COUNT items"
          
          # 説明文のサマリーを作成
          DESCRIPTIONS_SUMMARY=$(jq -r '[.[] | .text] | join(", ")' "$FOLDER_NAME/analysis/descriptions.json")
          echo "descriptions-summary=$DESCRIPTIONS_SUMMARY" >> $GITHUB_OUTPUT
        else
          echo "❌ Descriptions file not found"
          exit 1
        fi
        
        echo "completed=true" >> $GITHUB_OUTPUT
        
    - name: Commit analysis results
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        
        # Debug: Show what files were created
        echo "📁 Files in analysis directory:"
        ls -la "${{ needs.setup-branch.outputs.folder-name }}/analysis/" || echo "Analysis directory not found"
        
        # Add the specific folder
        git add "${{ needs.setup-branch.outputs.folder-name }}/"
        
        # Check git status
        echo "📋 Git status:"
        git status
        
        if git diff --cached --quiet; then
          echo "No analysis files to commit"
        else
          git commit -m "📊 Add video analysis results - Video: ${{ steps.detect-video.outputs.video-path }}, Title: ${{ steps.verify.outputs.title }}, Analyzed at: $(date)"
          git pull --rebase origin "${{ needs.setup-branch.outputs.branch-name }}"
          git push
        fi

  edit-video:
    runs-on: ubuntu-latest
    needs: [setup-branch, analyze-video]
    if: needs.analyze-video.outputs.analysis-completed == 'true'
    outputs:
      edited-video-path: ${{ steps.set-output.outputs.video-path }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Install FFmpeg and Fonts
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        # Install Japanese fonts for better text rendering
        sudo apt-get install -y fonts-noto-cjk fonts-ipafont-gothic fonts-ipafont-mincho
        ffmpeg -version
        fc-list | grep -i gothic || true
        
    - name: Create output directory
      run: |
        mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/edited-movie
        
    - name: Get video resolution
      id: video-res
      run: |
        RESOLUTION=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "${{ needs.analyze-video.outputs.actual-video-path }}")
        echo "video_resolution=$RESOLUTION" >> $GITHUB_OUTPUT
        echo "Original video resolution: $RESOLUTION"

    - name: Read title data
      id: read-title
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        TITLE_DATA=$(cat "$FOLDER_NAME/analysis/title.json")
        echo "title-data<<EOF" >> $GITHUB_OUTPUT
        echo "$TITLE_DATA" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate title video
      uses: ./modules/ffmpeg-title-generator
      with:
        title: ${{ fromJson(steps.read-title.outputs.title-data).title }}
        duration: ${{ fromJson(steps.read-title.outputs.title-data).duration }}
        resolution: ${{ steps.video-res.outputs.video_resolution }}
        fontsize: ${{ fromJson(steps.read-title.outputs.title-data).style.fontsize }}
        color: ${{ fromJson(steps.read-title.outputs.title-data).style.color }}
        bgcolor: ${{ fromJson(steps.read-title.outputs.title-data).style.bgcolor }}
        fontfile: ${{ env.FONT_FILE }}
        output-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/title.mp4
        
    - name: Apply text overlays
      uses: ./modules/ffmpeg-text-overlay
      with:
        video-path: ${{ needs.analyze-video.outputs.actual-video-path }}
        descriptions-json: ${{ needs.setup-branch.outputs.folder-name }}/analysis/descriptions.json
        fontfile: ${{ env.FONT_FILE }}
        output-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/video_with_overlays.mp4
        
    - name: Combine title and video
      id: finalize
      uses: ./modules/ffmpeg-video-concat
      with:
        video1-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/title.mp4
        video2-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/video_with_overlays.mp4
        video1-duration: ${{ fromJson(steps.read-title.outputs.title-data).duration }}
        output-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/basic-edited.mp4
        
    - name: Set output path and create report
      id: set-output
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        echo "video-path=$FOLDER_NAME/edited-movie/basic-edited.mp4" >> $GITHUB_OUTPUT
        
        # レポート作成
        cat > "$FOLDER_NAME/edited-movie/report.md" << EOF
        # 動画編集レポート
        
        ## 編集内容
        - **元動画**: ${{ needs.analyze-video.outputs.actual-video-path }}
        - **タイトル**: ${{ needs.analyze-video.outputs.title }}
        - **編集日時**: $(date)
        
        ## 追加された要素
        1. タイトル画面（冒頭3秒）
        2. 説明テキストオーバーレイ（$(jq '. | length' "$FOLDER_NAME/analysis/descriptions.json")箇所）
        
        ## 出力ファイル
        - 最終動画: \`edited-movie/basic-edited.mp4\`
        EOF
        
    - name: Commit edited video
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        git add --all -- ':!.gemini/'
        if git diff --cached --quiet; then
          echo "No edited files to commit"
        else
          git commit -m "🎬 Add edited video - Title: ${{ needs.analyze-video.outputs.title }}, Edited at: $(date)"
          git pull --rebase origin "${{ needs.setup-branch.outputs.branch-name }}"
          git push
        fi

  generate-title-image:
    runs-on: ubuntu-latest
    needs: [setup-branch, analyze-video]
    if: needs.analyze-video.outputs.analysis-completed == 'true'
    outputs:
      image-generated: ${{ steps.generate.outputs.image-generated }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Generate title image
      id: generate
      uses: ./modules/gemini-cli-title-image-generator
      with:
        branch-name: ${{ needs.setup-branch.outputs.branch-name }}
        folder-name: ${{ needs.setup-branch.outputs.folder-name }}
        output-path: 'title-image/background.jpg'
        commit-message: '🖼️ Add generated title background image - Title: ${{ needs.analyze-video.outputs.title }}'
        generation-prompt: |
          🖼️ **タイトル画像生成タスク**
          
          タイトル「${{ needs.analyze-video.outputs.title }}」に基づいた背景画像を生成してください。
          
          1. `mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/title-image`
          2. タイトルから高品質な背景画像のプロンプトを作成（英語で、cinematic, bokeh effect, warm color palette等を含む）
          3. `mcp__t2i-fal-imagen4-fast__imagen4_fast_submit`で生成開始
          4. `mcp__t2i-fal-imagen4-fast__imagen4_fast_status`で完了確認（最大20回）
          5. `mcp__t2i-fal-imagen4-fast__imagen4_fast_result`でURL取得
          6. 重要: 必ず`curl -L -o "$(pwd)/${{ needs.setup-branch.outputs.folder-name }}/title-image/background.jpg" "$IMAGE_URL"`でダウンロード
          7. generation-info.jsonに生成情報を保存
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        T2I_FAL_IMAGEN4_FAST_URL: ${{ secrets.T2I_FAL_IMAGEN4_FAST_URL }}
        
    - name: Commit title image
      if: steps.generate.outputs.image-generated == 'true'
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        # .gemini/settings.jsonを除外してコミット（既に存在する場合のコンフリクトを避ける）
        git add --all -- ':!.gemini/'
        if git diff --cached --quiet; then
          echo "No title image to commit"
        else
          git commit -m "${{ steps.generate.outputs.commit-message || '🖼️ Add generated title background image' }} - Generated at: $(date)"
          git pull --rebase origin "${{ needs.setup-branch.outputs.branch-name }}"
          git push
        fi

  generate-music:
    runs-on: ubuntu-latest
    needs: [setup-branch, analyze-video]
    if: needs.analyze-video.outputs.analysis-completed == 'true'
    outputs:
      music-generated: ${{ steps.generate.outputs.music-generated }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Generate music
      id: generate
      uses: ./modules/gemini-cli-music-generator
      with:
        branch-name: ${{ needs.setup-branch.outputs.branch-name }}
        folder-name: ${{ needs.setup-branch.outputs.folder-name }}
        output-path: 'music/background.wav'
        commit-message: '🎵 Add generated background music - Title: ${{ needs.analyze-video.outputs.title }}'
        generation-prompt: |
          🎵 **音楽生成タスク**
          
          タイトル「${{ needs.analyze-video.outputs.title }}」と内容「${{ needs.analyze-video.outputs.descriptions-summary }}」に基づいた15-30秒の短い音楽を生成してください。
          
          1. `mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/music`
          2. 英語で音楽プロンプトを作成（例: "A short 20-second ambient music"）
          3. `mcp__t2m-google-lyria__lyria_submit`で生成開始
          4. `mcp__t2m-google-lyria__lyria_status`で完了確認（最大30回、5秒間隔）
          5. `mcp__t2m-google-lyria__lyria_result`でURL取得
          6. **必須**: `curl -L -f --retry 3 -o "$(pwd)/${{ needs.setup-branch.outputs.folder-name }}/music/background.wav" "$MUSIC_URL"`でダウンロード
          7. ファイルサイズが50KB未満なら再試行
          8. generation-info.jsonに生成情報を保存
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        T2M_GOOGLE_LYRIA_URL: ${{ secrets.T2M_GOOGLE_LYRIA_URL }}
        
    - name: Commit music
      if: steps.generate.outputs.music-generated == 'true'
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        # .gemini/settings.jsonを除外してコミット（既に存在する場合のコンフリクトを避ける）
        git add --all -- ':!.gemini/'
        if git diff --cached --quiet; then
          echo "No music to commit"
        else
          git commit -m "🎵 Add generated background music - Title: ${{ needs.analyze-video.outputs.title }}, Generated at: $(date)"
          git pull --rebase origin "${{ needs.setup-branch.outputs.branch-name }}"
          git push
        fi

  final-verification:
    runs-on: ubuntu-latest
    needs: [setup-branch, analyze-video, edit-video, generate-title-image, generate-music]
    if: needs.analyze-video.outputs.analysis-completed == 'true'
    outputs:
      verification-passed: ${{ steps.verify-content.outputs.passed }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        pip install google-generativeai
        
    - name: 🔍 最終確認 (Python Script with Gemini Vision)
      id: final-check
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        mkdir -p "$FOLDER_NAME/verification"
        
        # 分析データの読み込み
        TITLE=$(jq -r '.title' "$FOLDER_NAME/analysis/title.json")
        DESCRIPTIONS=$(cat "$FOLDER_NAME/analysis/descriptions.json")
        
        # 検証プロンプトを作成
        VERIFY_PROMPT="編集された動画を確認し、以下の項目を検証してください：1. タイトル「$TITLE」が動画の冒頭に表示されているか 2. 以下の説明テキストが指定されたタイミングで表示されているか：$DESCRIPTIONS 3. テキストのタイミングが適切か 4. 全体的な品質と改善点。JSON形式で返してください：{\"status\": \"passed\" または \"failed\", \"title_match\": true/false, \"descriptions_accurate\": true/false, \"timing_appropriate\": true/false, \"issues\": [\"問題点のリスト\"], \"recommendations\": [\"改善提案のリスト\"]}"
        
        # 編集済み動画が存在するか確認
        if [ -f "$FOLDER_NAME/edited-movie/basic-edited.mp4" ]; then
          python scripts/gemini_analyzer.py \
            "$FOLDER_NAME/edited-movie/basic-edited.mp4" \
            "$FOLDER_NAME/verification/final-check.json" \
            "$GEMINI_API_KEY" \
            --prompt "$VERIFY_PROMPT" \
            --format json
        else
          echo '{"status": "failed", "issues": ["Edited video not found"]}' > "$FOLDER_NAME/verification/final-check.json"
        fi
        
        # タイトル画像の検証（存在する場合）
        if [ -f "$FOLDER_NAME/title-image/background.jpg" ]; then
          HARMONY_PROMPT="このタイトル背景画像が、タイトル「$TITLE」と動画の内容に調和しているか評価してください。JSON形式で返してください：{\"harmony_score\": 1-10の数値, \"feedback\": \"評価コメント\"}"
          
          python scripts/gemini_analyzer.py \
            "$FOLDER_NAME/title-image/background.jpg" \
            "$FOLDER_NAME/verification/image-harmony.json" \
            "$GEMINI_API_KEY" \
            --prompt "$HARMONY_PROMPT" \
            --format json
          
          # 結果をマージ
          if [ -f "$FOLDER_NAME/verification/image-harmony.json" ]; then
            jq -s '.[0] + {image_harmony: .[1]}' \
              "$FOLDER_NAME/verification/final-check.json" \
              "$FOLDER_NAME/verification/image-harmony.json" \
              > "$FOLDER_NAME/verification/final-check-tmp.json"
            mv "$FOLDER_NAME/verification/final-check-tmp.json" "$FOLDER_NAME/verification/final-check.json"
          fi
        fi
        
        # 検証レポート作成
        echo "# Content Verification Report" > "$FOLDER_NAME/verification/report.md"
        echo "" >> "$FOLDER_NAME/verification/report.md"
        STATUS=$(jq -r '.status' "$FOLDER_NAME/verification/final-check.json")
        echo "## Overall Status: ${STATUS^^}" >> "$FOLDER_NAME/verification/report.md"
        echo "" >> "$FOLDER_NAME/verification/report.md"
        echo "## Verification Completed" >> "$FOLDER_NAME/verification/report.md"
        echo "- **Date**: $(date)" >> "$FOLDER_NAME/verification/report.md"
             
    - name: Verify final check results
      id: verify-content
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        
        if [ -f "$FOLDER_NAME/verification/final-check.json" ]; then
          STATUS=$(jq -r '.status' "$FOLDER_NAME/verification/final-check.json")
          if [ "$STATUS" = "passed" ]; then
            echo "✅ Final verification passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Final verification found issues"
            echo "passed=false" >> $GITHUB_OUTPUT
            
            # 問題点を表示
            echo "Issues found:"
            jq -r '.issues[]' "$FOLDER_NAME/verification/final-check.json" 2>/dev/null || true
          fi
        else
          echo "⚠️ Verification file not found"
          echo "passed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit verification results
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        git add --all -- ':!.gemini/'
        if git diff --cached --quiet; then
          echo "No verification files to commit"
        else
          git commit -m "🔍 Add final verification results - Status: ${{ steps.verify-content.outputs.passed == 'true' && 'Passed' || 'Issues found' }}, Verified at: $(date)"
          git pull --rebase origin "${{ needs.setup-branch.outputs.branch-name }}"
          git push
        fi

  integrate-final-video:
    runs-on: ubuntu-latest
    needs: [setup-branch, analyze-video, edit-video, generate-title-image, generate-music, final-verification]
    if: needs.analyze-video.outputs.analysis-completed == 'true' && (needs.generate-title-image.outputs.image-generated == 'true' || needs.generate-music.outputs.music-generated == 'true')
    outputs:
      final-video-path: ${{ steps.finalize-enhanced.outputs.final-path }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Install FFmpeg and Fonts
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg bc
        # Install Japanese fonts for title rendering
        sudo apt-get install -y fonts-noto-cjk fonts-ipafont-gothic fonts-ipafont-mincho
        ffmpeg -version
        fc-list | grep -i noto || true
        
    - name: Read title data for final video
      id: read-title-final
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        TITLE_DATA=$(cat "$FOLDER_NAME/analysis/title.json")
        echo "title-data<<EOF" >> $GITHUB_OUTPUT
        echo "$TITLE_DATA" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Get video resolution
      id: video-res-final
      run: |
        RESOLUTION=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "${{ needs.analyze-video.outputs.actual-video-path }}")
        echo "video_resolution=$RESOLUTION" >> $GITHUB_OUTPUT
        
    - name: Generate enhanced title with background
      id: generate-enhanced-title
      if: needs.generate-title-image.outputs.image-generated == 'true'
      uses: ./modules/ffmpeg-title-generator
      with:
        title: ${{ fromJson(steps.read-title-final.outputs.title-data).title }}
        duration: ${{ fromJson(steps.read-title-final.outputs.title-data).duration }}
        resolution: ${{ steps.video-res-final.outputs.video_resolution }}
        fontsize: ${{ fromJson(steps.read-title-final.outputs.title-data).style.fontsize }}
        color: ${{ fromJson(steps.read-title-final.outputs.title-data).style.color }}
        bgcolor: ${{ fromJson(steps.read-title-final.outputs.title-data).style.bgcolor }}
        fontfile: ${{ env.FONT_FILE }}
        background-image: ${{ needs.setup-branch.outputs.folder-name }}/title-image/background.jpg
        output-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/title_with_bg.mp4
        
    - name: Combine enhanced title with video
      id: combine-enhanced
      if: needs.generate-title-image.outputs.image-generated == 'true'
      uses: ./modules/ffmpeg-video-concat
      with:
        video1-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/title_with_bg.mp4
        video2-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/video_with_overlays.mp4
        video1-duration: ${{ fromJson(steps.read-title-final.outputs.title-data).duration }}
        output-path: ${{ needs.setup-branch.outputs.folder-name }}/edited-movie/video_enhanced.mp4
        
    - name: Generate enhanced video with background and music
      id: finalize-enhanced
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        
        # 元のビデオファイル名を取得（パスとextensionを除去）
        ORIGINAL_VIDEO="${{ needs.analyze-video.outputs.actual-video-path }}"
        VIDEO_BASENAME=$(basename "$ORIGINAL_VIDEO" | sed 's/\.[^.]*$//')
        
        # 使用する動画を決定（背景画像があれば強化版、なければ通常版）
        if [ "${{ needs.generate-title-image.outputs.image-generated }}" = "true" ]; then
          echo "🖼️ Using enhanced title with background image"
            
          # オリジナルの動画（タイトルなし）から動画部分を取得
          # video_with_overlays.mp4を使用（これはタイトルなしの動画）
          
          VIDEO_FOR_MUSIC="$FOLDER_NAME/edited-movie/video_enhanced.mp4"
        else
          echo "📹 Using standard video"
          VIDEO_FOR_MUSIC="$FOLDER_NAME/edited-movie/basic-edited.mp4"
        fi
        
        # 音楽ファイルを探す
        if [ "${{ needs.generate-music.outputs.music-generated }}" = "true" ]; then
          if [ -f "$FOLDER_NAME/music/background.mp3" ]; then
            MUSIC_FILE="$FOLDER_NAME/music/background.mp3"
          elif [ -f "$FOLDER_NAME/music/background.wav" ]; then
            MUSIC_FILE="$FOLDER_NAME/music/background.wav"
          else
            echo "⚠️ Music file not found!"
            exit 1
          fi
          echo "music-file=$MUSIC_FILE" >> $GITHUB_OUTPUT
        fi
        
        # 最終出力ファイル名を設定
        FINAL_OUTPUT="$FOLDER_NAME/edited-movie/${VIDEO_BASENAME}-final-edited.mp4"
        echo "final-path=$FINAL_OUTPUT" >> $GITHUB_OUTPUT
        echo "video-for-music=$VIDEO_FOR_MUSIC" >> $GITHUB_OUTPUT
        
    - name: Add background music
      id: add-music
      if: needs.generate-music.outputs.music-generated == 'true'
      uses: ./modules/ffmpeg-add-music
      with:
        video-path: ${{ steps.finalize-enhanced.outputs.video-for-music }}
        music-path: ${{ steps.finalize-enhanced.outputs.music-file }}
        volume: '0.3'
        output-path: ${{ steps.finalize-enhanced.outputs.final-path }}
        
    - name: Copy video without music
      if: needs.generate-music.outputs.music-generated != 'true'
      run: |
        cp "${{ steps.finalize-enhanced.outputs.video-for-music }}" "${{ steps.finalize-enhanced.outputs.final-path }}"
        echo "✅ Final video copied without music"
        
    - name: Commit enhanced video
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        git add --all -- ':!.gemini/'
        if git diff --cached --quiet; then
          echo "No enhanced video to commit"
        else
          git commit -m "🎬 Add enhanced video with title background - Title: ${{ needs.analyze-video.outputs.title }}, Enhanced at: $(date)"
          git pull --rebase origin "${{ needs.setup-branch.outputs.branch-name }}"
          git push
        fi

  create-pull-request:
    runs-on: ubuntu-latest
    needs: [setup-branch, analyze-video, edit-video, generate-title-image, generate-music, final-verification, integrate-final-video]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        token: ${{ secrets.PAT_TOKEN || github.token }}
        
    - name: Create Pull Request
      continue-on-error: true
      run: |
        gh pr create \
          --title "🎬 Video Edit: ${{ needs.analyze-video.outputs.title }}" \
          --body "$(cat <<'EOF'
        ## Summary
        Analyzed and edited video with AI-generated title and explanatory overlays.
        
        ## Input
        - **Video**: ${{ needs.analyze-video.outputs.actual-video-path }}
        - **Custom Title**: ${{ github.event.inputs.edit_title }}
        
        ## Processing Pipeline
        1. 📊 **Analysis**: Gemini Vision analyzed video content
        2. 🎯 **Title**: Generated/used title "${{ needs.analyze-video.outputs.title }}"
        3. 📝 **Overlays**: Added explanatory text at key moments
        4. 🎬 **Edit**: Combined with FFmpeg (fade effects included)
        
        ## Generated Files
        - 📊 Analysis: `analysis/` directory
        - 🖼️ Title Image: `title-image/` directory
        - 🎵 Music: `music/` directory
        - 🎬 Edited Videos: 
          - `edited-movie/basic-edited.mp4` (standard)
          - `edited-movie/[original-filename]-final-edited.mp4` (with AI background and music)
        - 🔍 Verification: `verification/` directory
        - 📝 Reports: `edited-movie/report.md`, `README.md`
        
        ## Workflow Status
        - ✅ Video Analysis: Completed
        - ✅ Title Generation: Completed
        - ✅ Video Editing: Completed with FFmpeg
        - ${{ needs.generate-title-image.outputs.image-generated == 'true' && '✅' || '⚠️' }} Title Image Generation: ${{ needs.generate-title-image.outputs.image-generated == 'true' && 'Completed' || 'Skipped/Failed' }}
        - ${{ needs.generate-music.outputs.music-generated == 'true' && '✅' || '⚠️' }} Music Generation: ${{ needs.generate-music.outputs.music-generated == 'true' && 'Completed' || 'Skipped/Failed' }}
        - ${{ needs.final-verification.outputs.verification-passed == 'true' && '✅' || '⚠️' }} Final Verification: ${{ needs.final-verification.outputs.verification-passed == 'true' && 'Passed' || 'Issues Found' }}
        - ${{ (needs.generate-title-image.outputs.image-generated == 'true' || needs.generate-music.outputs.music-generated == 'true') && '✅' || '⚠️' }} Enhanced Video: ${{ (needs.generate-title-image.outputs.image-generated == 'true' || needs.generate-music.outputs.music-generated == 'true') && 'Generated' || 'Skipped' }}
        EOF
        )" \
          --head "${{ needs.setup-branch.outputs.branch-name }}" \
          --base main
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        
    - name: Create PR Summary (No PAT)
      if: failure()
      run: |
        echo "⚠️ Pull Request creation skipped - PAT_TOKEN not configured"
        echo "To enable automatic PR creation, please add a Personal Access Token with 'repo' and 'pull_request' permissions as PAT_TOKEN in repository secrets."
        echo ""
        echo "Branch created: ${{ needs.setup-branch.outputs.branch-name }}"
        echo "You can manually create a PR from this branch."
