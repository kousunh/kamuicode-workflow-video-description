name: 'Music Generator Module'
description: 'AI-powered music generation using Gemini and Google Lyria'
author: 'KamuiCode'

inputs:
  branch-name:
    description: '作業ブランチ名'
    required: true
  folder-name:
    description: '出力フォルダー名'
    required: true
  output-path:
    description: '生成された音楽の保存パス（フォルダー名からの相対パス）'
    required: false
    default: 'music/background.wav'
  commit-message:
    description: 'Gitコミットメッセージ'
    required: false
    default: '🎵 Add generated music'
  generation-prompt:
    description: 'Geminiエージェントに渡すプロンプト全体'
    required: true
  GEMINI_API_KEY:
    description: 'Gemini API Key'
    required: true
  T2M_GOOGLE_LYRIA_URL:
    description: 'Text-to-Music API URL'
    required: true

outputs:
  music-generated:
    description: '音楽生成の成功可否'
    value: ${{ steps.verify-music.outputs.generated }}

runs:
  using: "composite"
  steps:
    - name: Debug - Check environment
      shell: bash
      run: |
        echo "🔍 Debug: Current working directory"
        pwd
        echo "🔍 Debug: Directory contents before creating .gemini"
        ls -la
        
    - name: Create .gemini/settings.json
      shell: bash
      run: |
        mkdir -p .gemini
        cat > .gemini/settings.json << EOF
        {
          "mcpServers": {
            "t2m-google-lyria": {
              "httpUrl": "${{ inputs.T2M_GOOGLE_LYRIA_URL }}",
              "timeout": 300000
            }
          },
          "coreTools": [
            "ReadFileTool",
            "WriteFileTool", 
            "EditFileTool",
            "ShellTool"
          ]
        }
        EOF
        echo "🔍 Debug: Verifying .gemini/settings.json was created"
        ls -la .gemini/
        echo "🔍 Debug: Contents of settings.json (with URL masked)"
        cat .gemini/settings.json | sed 's/"httpUrl": ".*"/"httpUrl": "***MASKED***"/'
        
        # .gemini/を.gitignoreに追加（既に存在する場合は無視）
        if ! grep -q "^\.gemini/$" .gitignore 2>/dev/null; then
          echo -e "\n# Gemini settings (contains sensitive URLs) - auto-added by action\n.gemini/" >> .gitignore
          echo "✅ Added .gemini/ to .gitignore"
        else
          echo "✅ .gemini/ is already in .gitignore"
        fi
        
        # 明示的に.gemini/をgitの追跡から除外
        echo "🔒 Ensuring .gemini/ is not tracked by git"
        git rm -r --cached .gemini/ 2>/dev/null || true
        
        # git addする際の推奨コマンドを表示
        echo "📌 Note: When committing, use: git add --all -- ':!.gemini/' to exclude .gemini/"
        
    - name: 🎵 AI音楽生成エージェント (Gemini + Google Lyria)
      id: generate-music
      uses: google-gemini/gemini-cli-action@main
      with:
        GEMINI_API_KEY: ${{ inputs.GEMINI_API_KEY }}
        prompt: ${{ inputs.generation-prompt }}
      continue-on-error: true
        
    - name: Retry on rate limit
      if: steps.generate-music.outcome == 'failure'
      shell: bash
      run: |
        echo "⏳ First attempt failed, waiting 60 seconds before retry..."
        sleep 60
        
    - name: 🎵 AI音楽生成エージェント (Final Retry)
      id: generate-music-retry
      if: steps.generate-music.outcome == 'failure'
      uses: google-gemini/gemini-cli-action@main
      with:
        GEMINI_API_KEY: ${{ inputs.GEMINI_API_KEY }}
        prompt: ${{ inputs.generation-prompt }}
        
    - name: Check generation result
      shell: bash
      run: |
        if [ "${{ steps.generate-music.outcome }}" = "success" ] || \
           [ "${{ steps.generate-music-retry.outcome }}" = "success" ]; then
          echo "✅ Music generation succeeded"
        else
          echo "❌ All attempts failed (2 attempts total)"
          exit 1
        fi
             
    - name: Verify music generation
      id: verify-music
      shell: bash
      run: |
        FOLDER_NAME="${{ inputs.folder-name }}"
        OUTPUT_PATH="${{ inputs.output-path }}"
        FULL_PATH="$FOLDER_NAME/$OUTPUT_PATH"
        
        # mp3またはwavファイルを確認
        if [ -f "$FULL_PATH" ]; then
          MUSIC_FILE="$FULL_PATH"
        elif [ -f "$FOLDER_NAME/music/background.mp3" ]; then
          MUSIC_FILE="$FOLDER_NAME/music/background.mp3"
        elif [ -f "$FOLDER_NAME/music/background.wav" ]; then
          MUSIC_FILE="$FOLDER_NAME/music/background.wav"
        else
          MUSIC_FILE=""
        fi
        
        if [ -n "$MUSIC_FILE" ]; then
          FILE_SIZE=$(stat -c%s "$MUSIC_FILE" 2>/dev/null || stat -f%z "$MUSIC_FILE" 2>/dev/null || echo "0")
          # Check for reasonable audio file size (at least 50KB)
          if [ "$FILE_SIZE" -gt 50000 ]; then
            echo "✅ Music generated successfully (Size: $FILE_SIZE bytes)"
            
            # Additional validation using ffprobe if available
            if command -v ffprobe >/dev/null 2>&1; then
              DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$MUSIC_FILE" 2>/dev/null || echo "0")
              echo "Music duration: $DURATION seconds"
              
              if [ "$(echo "$DURATION > 5" | bc -l 2>/dev/null || echo 0)" -eq 1 ]; then
                echo "generated=true" >> $GITHUB_OUTPUT
              else
                echo "⚠️ Music file too short (Duration: $DURATION seconds)"
                echo "generated=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "generated=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Music file too small (Size: $FILE_SIZE bytes, expected > 50KB)"
            echo "generated=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "⚠️ Music not generated at: $FULL_PATH"
          echo "generated=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Clean up .gemini directory
      if: always()
      shell: bash
      run: |
        echo "🧹 Cleaning up .gemini directory"
        rm -rf .gemini/
        echo "✅ .gemini directory removed"